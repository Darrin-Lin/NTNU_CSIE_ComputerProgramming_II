diff --git a/parse.c b/parse.c
index 6acaeb8..0f9d703 100644
--- a/parse.c
+++ b/parse.c
@@ -1632,7 +1632,8 @@ static Node *stmt(Token **rest, Token *tok) {
     return node;
   }
 
-  if (equal(tok, "for")) {
+    if (equal(tok, "for"))
+  {
     Node *node = new_node(ND_FOR, tok);
     tok = skip(tok->next, "(");
 
@@ -1642,11 +1643,99 @@ static Node *stmt(Token **rest, Token *tok) {
     char *cont = cont_label;
     brk_label = node->brk_label = new_unique_name();
     cont_label = node->cont_label = new_unique_name();
-
-    if (is_typename(tok)) {
+    fprintf(stderr, "tok->loc: %s\n", tok->loc);
+    char change_result[4096] = {0};
+    int8_t is_rb = 0;
+    if (strchr(tok->loc, ':') != NULL)
+    {
+
+      strncpy(change_result, tok->loc, 4096);
+      char *end_for_loop = strchr(change_result, '}') + 1;
+      *end_for_loop = '\0';
+      static char tok_change[32768] = {0};
+
+      if (strchr(change_result, ':') != NULL)
+      {
+        is_rb = 1;
+        char *variable_type = strtok(change_result, " ");
+        char *variable_get = strtok(NULL, ":");
+        char *variable_value = strtok(NULL, ")");
+        strtok(variable_get, " ");
+        strtok(variable_value, " ");
+        strtok(variable_type, " ");
+        char *variable_name = strrchr(variable_get, '*') == NULL ? variable_get : strrchr(variable_get, '*') + 1;
+        char tmp_for_loop[1024] = {0};
+        snprintf(tmp_for_loop, 1024, "%s *%s = %s;%s < %s+(sizeof(%s)/sizeof(*%s));%s++)", variable_type, variable_get, variable_value, variable_name, variable_value, variable_value, variable_value, variable_name);
+        char inside_for_loop[4096] = {0};
+        strncpy(inside_for_loop, strchr(tok->loc, '{'), 4096);
+        end_for_loop = strchr(inside_for_loop, '}') + 1;
+        *end_for_loop = '\0';
+        printf("inside_for_loop: --%s--\n", inside_for_loop);
+        char result[4096] = {0};
+        strncpy(result, tmp_for_loop, 4096);
+        char *tmp_inside_for_loop = inside_for_loop;
+        char *tmp_var = strstr(tmp_inside_for_loop, variable_name);
+        while (*tmp_inside_for_loop)
+        {
+          // replace all occurences of variable_name to *variable_name
+          if (tmp_inside_for_loop == tmp_var)
+          {
+            if (!((*(tmp_var - 1) <= 'z' && *(tmp_var - 1) >= 'a') || (*(tmp_var - 1) <= 'Z' && *(tmp_var - 1) >= 'A') || *(tmp_var - 1) == '_' || (*(tmp_var + 1) <= 'z' && *(tmp_var + 1) >= 'a') || (*(tmp_var + 1) <= 'Z' && *(tmp_var + 1) >= 'A') || *(tmp_var + 1) == '_'))
+            {
+              strncat(result, tmp_inside_for_loop, tmp_var - tmp_inside_for_loop);
+              strncat(result, "*", 1);
+              strncat(result, variable_name, strlen(variable_name));
+              tmp_inside_for_loop += strlen(variable_name);
+              tmp_var = strstr(tmp_inside_for_loop, variable_name);
+            }
+            else
+            {
+              strncat(result, tmp_inside_for_loop, 1);
+              tmp_inside_for_loop++;
+              tmp_var = strstr(tmp_inside_for_loop, variable_name);
+            }
+          }
+          else
+          {
+            strncat(result, tmp_inside_for_loop, 1);
+            tmp_inside_for_loop++;
+          }
+        }
+        char remain[16384] = {0};
+        char *p_remain = strchr(tok->loc, '}');
+        printf("p_remain: --%s--\n", p_remain);
+        if (p_remain != NULL)
+        {
+          p_remain++;
+          strncpy(remain, p_remain, 16384);
+        }
+
+        snprintf(tok_change, 32768, "%s%s", result, remain);
+
+        printf("tmp_for_loop: --%s--\n", tmp_for_loop);
+        printf("result: --%s--\n", result);
+        printf("tok_change: --%s--\n", tok_change);
+        // strncpy(tok->loc, tok_change, 32768);
+        tok->loc = tok_change;
+        int32_t lenoftok = strlen(tok->loc);
+        for(int32_t i = 0; i < lenoftok; i++){
+          tok->loc[i] = tok_change[i];
+        }
+        printf("tok->loc: --%s--\n", tok->loc);
+        printf("tok->str: --%s--\n", tok->str);
+        // tok->str = tok_change;
+      } 
+    }
+    printf("tok->loc: %s\n", tok->loc);
+    if (is_typename(tok))
+    {
+      printf("tok->loc: %s\n", tok->loc);
       Type *basety = declspec(&tok, tok, NULL);
+      printf("tok->loc: %s\n", tok->loc);
       node->init = declaration(&tok, tok, basety, NULL);
-    } else {
+    }
+    else
+    {
       node->init = expr_stmt(&tok, tok);
     }
 
@@ -1657,7 +1746,7 @@ static Node *stmt(Token **rest, Token *tok) {
     if (!equal(tok, ")"))
       node->inc = expr(&tok, tok);
     tok = skip(tok, ")");
-
+    printf("tok->loc: %s\n", tok->str);
     node->then = stmt(rest, tok);
 
     leave_scope();
